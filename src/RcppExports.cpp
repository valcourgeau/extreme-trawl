// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// timesTwo
int timesTwo(int x);
RcppExport SEXP _gammaextremes_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// CrossMoment
double CrossMoment(NumericVector xs, float delta, float beta, float b_oh, float b_o_exc_h);
RcppExport SEXP _gammaextremes_CrossMoment(SEXP xsSEXP, SEXP deltaSEXP, SEXP betaSEXP, SEXP b_ohSEXP, SEXP b_o_exc_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< float >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type b_oh(b_ohSEXP);
    Rcpp::traits::input_parameter< float >::type b_o_exc_h(b_o_exc_hSEXP);
    rcpp_result_gen = Rcpp::wrap(CrossMoment(xs, delta, beta, b_oh, b_o_exc_h));
    return rcpp_result_gen;
END_RCPP
}
// FirstMoment
double FirstMoment(NumericVector xs, float delta, float beta, float b_oh, float b_o_exc_h);
RcppExport SEXP _gammaextremes_FirstMoment(SEXP xsSEXP, SEXP deltaSEXP, SEXP betaSEXP, SEXP b_ohSEXP, SEXP b_o_exc_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< float >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type b_oh(b_ohSEXP);
    Rcpp::traits::input_parameter< float >::type b_o_exc_h(b_o_exc_hSEXP);
    rcpp_result_gen = Rcpp::wrap(FirstMoment(xs, delta, beta, b_oh, b_o_exc_h));
    return rcpp_result_gen;
END_RCPP
}
// SquareMoment
double SquareMoment(NumericVector xs, float delta, float beta, float b_oh, float b_o_exc_h);
RcppExport SEXP _gammaextremes_SquareMoment(SEXP xsSEXP, SEXP deltaSEXP, SEXP betaSEXP, SEXP b_ohSEXP, SEXP b_o_exc_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< float >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type b_oh(b_ohSEXP);
    Rcpp::traits::input_parameter< float >::type b_o_exc_h(b_o_exc_hSEXP);
    rcpp_result_gen = Rcpp::wrap(SquareMoment(xs, delta, beta, b_oh, b_o_exc_h));
    return rcpp_result_gen;
END_RCPP
}
// CppCaseZeroZero
double CppCaseZeroZero(double alpha, double beta, double kappa, double B1, double B2, double B3);
RcppExport SEXP _gammaextremes_CppCaseZeroZero(SEXP alphaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP B1SEXP, SEXP B2SEXP, SEXP B3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< double >::type B2(B2SEXP);
    Rcpp::traits::input_parameter< double >::type B3(B3SEXP);
    rcpp_result_gen = Rcpp::wrap(CppCaseZeroZero(alpha, beta, kappa, B1, B2, B3));
    return rcpp_result_gen;
END_RCPP
}
// CppCaseOneZero
double CppCaseOneZero(NumericVector xs, double alpha, double beta, double kappa, double B1, double B2, double B3);
RcppExport SEXP _gammaextremes_CppCaseOneZero(SEXP xsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP B1SEXP, SEXP B2SEXP, SEXP B3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< double >::type B2(B2SEXP);
    Rcpp::traits::input_parameter< double >::type B3(B3SEXP);
    rcpp_result_gen = Rcpp::wrap(CppCaseOneZero(xs, alpha, beta, kappa, B1, B2, B3));
    return rcpp_result_gen;
END_RCPP
}
// CppCaseOneOne
double CppCaseOneOne(NumericVector xs, double alpha, double beta, double kappa, double B1, double B2, double B3);
RcppExport SEXP _gammaextremes_CppCaseOneOne(SEXP xsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP B1SEXP, SEXP B2SEXP, SEXP B3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< double >::type B2(B2SEXP);
    Rcpp::traits::input_parameter< double >::type B3(B3SEXP);
    rcpp_result_gen = Rcpp::wrap(CppCaseOneOne(xs, alpha, beta, kappa, B1, B2, B3));
    return rcpp_result_gen;
END_RCPP
}
// CppCaseSeparator
double CppCaseSeparator(NumericVector xs, double alpha, double beta, double kappa, double B1, double B2, double B3);
RcppExport SEXP _gammaextremes_CppCaseSeparator(SEXP xsSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP B1SEXP, SEXP B2SEXP, SEXP B3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type B1(B1SEXP);
    Rcpp::traits::input_parameter< double >::type B2(B2SEXP);
    Rcpp::traits::input_parameter< double >::type B3(B3SEXP);
    rcpp_result_gen = Rcpp::wrap(CppCaseSeparator(xs, alpha, beta, kappa, B1, B2, B3));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gammaextremes_timesTwo", (DL_FUNC) &_gammaextremes_timesTwo, 1},
    {"_gammaextremes_CrossMoment", (DL_FUNC) &_gammaextremes_CrossMoment, 5},
    {"_gammaextremes_FirstMoment", (DL_FUNC) &_gammaextremes_FirstMoment, 5},
    {"_gammaextremes_SquareMoment", (DL_FUNC) &_gammaextremes_SquareMoment, 5},
    {"_gammaextremes_CppCaseZeroZero", (DL_FUNC) &_gammaextremes_CppCaseZeroZero, 6},
    {"_gammaextremes_CppCaseOneZero", (DL_FUNC) &_gammaextremes_CppCaseOneZero, 7},
    {"_gammaextremes_CppCaseOneOne", (DL_FUNC) &_gammaextremes_CppCaseOneOne, 7},
    {"_gammaextremes_CppCaseSeparator", (DL_FUNC) &_gammaextremes_CppCaseSeparator, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_gammaextremes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
